AWSTemplateFormatVersion: 2010-09-09
Description: Spring Boot Cloudformation demo stack.
Parameters:
  NatKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the NAT instances
    Type: String
    Default: nat
  BastionHostKeyName:
    Description: Keypair for Bastion Host instances
    Type: String
    Default: bastion
  BackendKeyName:
    Description: Keypair for backend instances
    Type: String
    Default: backend
  EnvName:
    Description: Name of the environment to create
    Type: String
    Default: testing
Mappings:
  AWSNATAMI:
    eu-west-1:
      AMI: ami-023740ced0de07d3f
Resources:
  NATRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: NAT_Takeover
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeRouteTables'
                  - 'ec2:CreateRoute'
                  - 'ec2:ReplaceRoute'
                  - 'ec2:StartInstances'
                  - 'ec2:StopInstances'
                Resource: '*'
  NATRoleProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref NATRole
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Environment
          Value: !Ref EnvName

  PubSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Environment
          Value: !Ref EnvName

  PriSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Private
        - Key: Environment
          Value: !Ref EnvName

  PubSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1b
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Environment
          Value: !Ref EnvName

  PriSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1b
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Private
        - Key: Environment
          Value: !Ref EnvName

  PubSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1c
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Environment
          Value: !Ref EnvName

  PriSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1c
      CidrBlock: 10.0.5.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Private
        - Key: Environment
          Value: !Ref EnvName

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Environment
          Value: !Ref EnvName

  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Environment
          Value: !Ref EnvName

  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Private
        - Key: Environment
          Value: !Ref EnvName

  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Private
        - Key: Environment
          Value: !Ref EnvName

  PrivateRouteTable3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Private
        - Key: Environment
          Value: !Ref EnvName

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NAT1Instance
  PrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NAT2Instance
  PrivateRoute3:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NAT2Instance
  PubSubnet1RTAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnet1
      RouteTableId: !Ref PublicRouteTable
  PubSubnet2RTAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnet2
      RouteTableId: !Ref PublicRouteTable
  PubSubnet3RTAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnet3
      RouteTableId: !Ref PublicRouteTable
  PriSubnet1RTAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PriSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  PriSubnet2RTAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PriSubnet2
      RouteTableId: !Ref PrivateRouteTable2
  PriSubnet3RTAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PriSubnet3
      RouteTableId: !Ref PrivateRouteTable3
  NAT1EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      InstanceId: !Ref NAT1Instance
  NAT2EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      InstanceId: !Ref NAT2Instance
  NAT1Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment1: 'Create NAT #1'
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref NatKeyName
      IamInstanceProfile: !Ref NATRoleProfile
      SubnetId: !Ref PubSubnet1
      SourceDestCheck: 'false'
      ImageId: !FindInMap
        - AWSNATAMI
        - !Ref 'AWS::Region'
        - AMI
      SecurityGroupIds:
        - !Ref NATSecurityGroup
      Tags:
        - Key: Name
          Value: 'NAT #1'
        - Key: Environment
          Value: !Ref EnvName

      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -v
            - |
              yum update -y aws*
            - |
              . /etc/profile.d/aws-apitools-common.sh
            - |
              # Configure iptables
            - >
              /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j
              MASQUERADE
            - |
              /sbin/iptables-save > /etc/sysconfig/iptables
            - |
              # Configure ip forwarding and redirects
            - >
              echo 1 >  /proc/sys/net/ipv4/ip_forward && echo 0 >
              /proc/sys/net/ipv4/conf/eth0/send_redirects
            - |
              mkdir -p /etc/sysctl.d/
            - |
              cat <<EOF > /etc/sysctl.d/nat.conf
            - |
              net.ipv4.ip_forward = 1
            - |
              net.ipv4.conf.eth0.send_redirects = 0
            - |
              EOF
            - |
              # Download nat_monitor.sh and configure
            - |
              cd /root
            - >
              wget
              http://media.amazonwebservices.com/articles/nat_monitor_files/nat_monitor.sh
            - |
              NAT_ID=
            - >
              # CloudFormation should have updated the PrivateRouteTable2 by now
              (due to yum update), however loop to make sure
            - |
              while [ "$NAT_ID" == "" ]; do
            - |2
                sleep 60
            - '  NAT_ID=`/opt/aws/bin/ec2-describe-route-tables '
            - !Ref PrivateRouteTable2
            - ' -U https://ec2.'
            - !Ref 'AWS::Region'
            - |
              .amazonaws.com | grep 0.0.0.0/0 | awk '{print $2;}'`
            - |2
                #echo `date` "-- NAT_ID=$NAT_ID" >> /tmp/test.log
            - |
              done
            - |
              # Update NAT_ID, NAT_RT_ID, and My_RT_ID
            - >
              sed "s/NAT_ID=/NAT_ID=$NAT_ID/g" /root/nat_monitor.sh >
              /root/nat_monitor.tmp
            - sed "s/NAT_RT_ID=/NAT_RT_ID=
            - !Ref PrivateRouteTable2
            - |
              /g" /root/nat_monitor.tmp > /root/nat_monitor.sh
            - sed "s/My_RT_ID=/My_RT_ID=
            - !Ref PrivateRouteTable1
            - |
              /g" /root/nat_monitor.sh > /root/nat_monitor.tmp
            - 'sed "s/EC2_URL=/EC2_URL=https:\/\/ec2.'
            - !Ref 'AWS::Region'
            - .amazonaws.com
            - |
              /g" /root/nat_monitor.tmp > /root/nat_monitor.sh
            - sed "s/Num_Pings=3/Num_Pings=3
            - |
              /g" /root/nat_monitor.sh > /root/nat_monitor.tmp
            - sed "s/Ping_Timeout=1/Ping_Timeout=1
            - |
              /g" /root/nat_monitor.tmp > /root/nat_monitor.sh
            - sed "s/Wait_Between_Pings=2/Wait_Between_Pings=2
            - |
              /g" /root/nat_monitor.sh > /root/nat_monitor.tmp
            - sed "s/Wait_for_Instance_Stop=60/Wait_for_Instance_Stop=60
            - |
              /g" /root/nat_monitor.tmp > /root/nat_monitor.sh
            - sed "s/Wait_for_Instance_Start=300/Wait_for_Instance_Start=300
            - |
              /g" /root/nat_monitor.sh > /root/nat_monitor.tmp
            - |
              mv /root/nat_monitor.tmp /root/nat_monitor.sh
            - |
              chmod a+x /root/nat_monitor.sh
            - >
              echo '@reboot /root/nat_monitor.sh > /tmp/nat_monitor.log' |
              crontab
            - |
              /root/nat_monitor.sh > /tmp/nat_monitor.log &
  NAT2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment1: 'Create NAT #2'
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref NatKeyName
      IamInstanceProfile: !Ref NATRoleProfile
      SubnetId: !Ref PubSubnet2
      SourceDestCheck: 'false'
      ImageId: !FindInMap
        - AWSNATAMI
        - !Ref 'AWS::Region'
        - AMI
      SecurityGroupIds:
        - !Ref NATSecurityGroup
      Tags:
        - Key: Name
          Value: 'NAT #2'
        - Key: Environment
          Value: !Ref EnvName

      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -v
            - |
              yum update -y aws*
            - |
              # Configure iptables
            - >
              /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j
              MASQUERADE
            - |
              /sbin/iptables-save > /etc/sysconfig/iptables
            - |
              # Configure ip forwarding and redirects
            - >
              echo 1 >  /proc/sys/net/ipv4/ip_forward && echo 0 >
              /proc/sys/net/ipv4/conf/eth0/send_redirects
            - |
              mkdir -p /etc/sysctl.d/
            - |
              cat <<EOF > /etc/sysctl.d/nat.conf
            - |
              net.ipv4.ip_forward = 1
            - |
              net.ipv4.conf.eth0.send_redirects = 0
            - |
              EOF
            - |
              # Download nat_monitor.sh and configure
            - |
              cd /root
            - >
              wget
              http://media.amazonwebservices.com/articles/nat_monitor_files/nat_monitor.sh
            - |
              # Update NAT_ID, NAT_RT_ID, and My_RT_ID
            - sed "s/NAT_ID=/NAT_ID=
            - !Ref NAT1Instance
            - |
              /g" /root/nat_monitor.sh > /root/nat_monitor.tmp
            - sed "s/NAT_RT_ID=/NAT_RT_ID=
            - !Ref PrivateRouteTable1
            - |
              /g" /root/nat_monitor.tmp > /root/nat_monitor.sh
            - sed "s/My_RT_ID=/My_RT_ID=
            - !Ref PrivateRouteTable2
            - |
              /g" /root/nat_monitor.sh > /root/nat_monitor.tmp
            - 'sed "s/EC2_URL=/EC2_URL=https:\/\/ec2.'
            - !Ref 'AWS::Region'
            - .amazonaws.com
            - |
              /g" /root/nat_monitor.tmp > /root/nat_monitor.sh
            - sed "s/Num_Pings=3/Num_Pings=3
            - |
              /g" /root/nat_monitor.sh > /root/nat_monitor.tmp
            - sed "s/Ping_Timeout=1/Ping_Timeout=1
            - |
              /g" /root/nat_monitor.tmp > /root/nat_monitor.sh
            - sed "s/Wait_Between_Pings=2/Wait_Between_Pings=2
            - |
              /g" /root/nat_monitor.sh > /root/nat_monitor.tmp
            - sed "s/Wait_for_Instance_Stop=60/Wait_for_Instance_Stop=60
            - |
              /g" /root/nat_monitor.tmp > /root/nat_monitor.sh
            - sed "s/Wait_for_Instance_Start=300/Wait_for_Instance_Start=300
            - |
              /g" /root/nat_monitor.sh > /root/nat_monitor.tmp
            - |
              mv /root/nat_monitor.tmp /root/nat_monitor.sh
            - |
              chmod a+x /root/nat_monitor.sh
            - >
              echo '@reboot /root/nat_monitor.sh > /tmp/nat_monitor.log' |
              crontab
            - |
              /root/nat_monitor.sh >> /tmp/nat_monitor.log &
  NATSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Rules for allowing access to HA Nodes
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: '-1'
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
  NATAllowICMP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref NATSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      SourceSecurityGroupId: !Ref NATSecurityGroup
  BastionHost:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'FALSE'
      ImageId: ami-892fe1fe
      InstanceType: t2.micro
      KeyName: !Ref BastionHostKeyName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: Bastion host
        - Key: Environment
          Value: !Ref EnvName

      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref PubSubnet1
          PrivateIpAddresses:
            - PrivateIpAddress: 10.0.0.99
              Primary: 'true'
          GroupSet:
            - !Ref BastionSG
  BastionHostEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      InstanceId: !Ref BastionHost
  BastionSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Security group for bastion host, can be used to allow ssh connections
        from particular IP addresses.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Bastion server security group
        - Key: Environment
          Value: !Ref EnvName

  LoadBalancerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Security group for elastic load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ELB security group
        - Key: Environment
          Value: !Ref EnvName

  ApplicationSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Security group for application
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSG
          IpProtocol: tcp
          FromPort: '8000'
          ToPort: '8000'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Application server security group
        - Key: Environment
          Value: !Ref EnvName

Outputs:
  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvName}-VpcId
  SubnetPriv1:
    Description: Private subnet one
    Value: !Ref PriSubnet1
    Export:
      Name: !Sub ${EnvName}-SubnetPriv1
  SubnetPriv2:
    Description: Private subnet two
    Value: !Ref PriSubnet2
    Export:
      Name: !Sub ${EnvName}-SubnetPriv2
  SubnetPriv3:
    Description: Private subnet three
    Value: !Ref PriSubnet3
    Export:
      Name: !Sub ${EnvName}-SubnetPriv3

  SubnetPub1:
    Description: Private subnet one
    Value: !Ref PubSubnet1
    Export:
      Name: !Sub ${EnvName}-SubnetPub1
  SubnetPub2:
    Description: Private subnet two
    Value: !Ref PubSubnet2
    Export:
      Name: !Sub ${EnvName}-SubnetPub2
  SubnetPub3:
    Description: Private subnet three
    Value: !Ref PubSubnet3
    Export:
      Name: !Sub ${EnvName}-SubnetPub3
  LoadBalancerSG:
    Description: Security group for application
    Value: !Ref LoadBalancerSG
    Export:
      Name: !Sub ${EnvName}-LoadBalancerSG
  ApplicationSG:
    Description: Security group for application
    Value: !Ref ApplicationSG
    Export:
      Name: !Sub ${EnvName}-ApplicationSG